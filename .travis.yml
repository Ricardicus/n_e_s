language: cpp
dist: bionic

addons:
  apt:
    packages: &common-apt-packages
      - python3-pip

matrix:
  include:
    - name: "bazel"
      before_install:
        - OS=linux
        - ARCH=x86_64
        - V=2.1.1
        - if [[ "$TRAVIS_OS_NAME" == "osx" ]]; then OS=darwin; fi
        - GH_BASE="https://github.com/bazelbuild/bazel/releases/download/$V"
        - GH_ARTIFACT="bazel-$V-installer-$OS-$ARCH.sh"
        - URL="$GH_BASE/$GH_ARTIFACT"
        - wget -O install.sh $URL
        - chmod +x install.sh
        - ./install.sh --user
        - rm -f install.sh
      install: []
      before_script: []
      script:
      - |
        bazel \
          --output_base=$HOME/.cache/bazel \
          test \
          --config=gnulike \
          ...

    - name: "clang-tidy 9"
      addons:
        apt:
          sources:
            - ubuntu-toolchain-r-test
            - sourceline: 'deb https://apt.llvm.org/bionic/ llvm-toolchain-bionic-9 main main'
              key_url: 'https://apt.llvm.org/llvm-snapshot.gpg.key'
          packages:
            - *common-apt-packages
            - clang-9
            - clang-tidy-9
            - libstdc++-8-dev
      script:
        - CXX=clang++-9 cmake -DCMAKE_EXPORT_COMPILE_COMMANDS=ON ..
        - travis_wait run-clang-tidy-9.py -q -p . "application|core|nes" -header-filter="(nes|core)/"

    - name: "clang-format"
      addons:
        apt:
          packages:
            - *common-apt-packages
            - clang-format
      before_script: []
      script:
        - find application core nes -name *.h -o -name *.cpp | xargs clang-format -style=file -i
        - git diff --exit-code

    - name: "gcc 8"
      addons: &gcc8
        apt:
          packages:
            - *common-apt-packages
            - g++-8
      env: MATRIX_EVAL="CXX=g++-8 BUILD_TYPE=Debug"

    - name: "gcc 9 coverage"
      addons: &gcc9
        apt:
          sources:
            - sourceline: 'ppa:ubuntu-toolchain-r/test'
          packages:
            - *common-apt-packages
            - g++-9
      before_install: pip install gcovr --user
      script:
        - CXX=g++-9 CXXFLAGS="--coverage" LDFLAGS="--coverage" cmake ..
        - make
        - ctest --output-on-failure
        - gcovr --gcov-executable gcov-9 -p --root .. --fail-under-line=94 --exclude 'CMakeFiles/' --exclude '_deps/' --exclude '(.+/)?test/' --exclude '.+/(application|nestest)/'

    - name: "clang 7"
      addons: &clang7
        apt:
          packages:
            - *common-apt-packages
            - clang-7
            - libstdc++-7-dev
      env: MATRIX_EVAL="CXX=clang++-7 BUILD_TYPE=Debug"

    - name: "clang 7 release"
      addons: *clang7
      env: MATRIX_EVAL="CXX=clang++-7 BUILD_TYPE=Release"

    - name: "clang 8"
      addons: &clang8
        apt:
          packages:
            - *common-apt-packages
            - clang-8
            - libstdc++-8-dev
      env: MATRIX_EVAL="CXX=clang++-8 BUILD_TYPE=Debug"

    - name: "clang 9 sanitizers"
      addons: &clang9
        apt:
          sources:
            - sourceline: 'deb https://apt.llvm.org/bionic/ llvm-toolchain-bionic-9 main main'
              key_url: 'https://apt.llvm.org/llvm-snapshot.gpg.key'
          packages:
            - *common-apt-packages
            - clang-9
            - libstdc++-8-dev
      env:
        - MATRIX_EVAL="CXX=clang++-9 BUILD_TYPE=Debug"
        - CMAKE_EXTRA_OPTIONS="-DADDRESS_SANITIZER=ON -DUNDEFINED_SANITIZER=ON"
        - ASAN_OPTIONS="strict_string_checks=1:detect_stack_use_after_return=1:check_initialization_order=1:strict_init_order=1"
        - UBSAN_OPTIONS="print_stacktrace=1:halt_on_error=1"
        - ASAN_SYMBOLIZER_PATH="$(which llvm-symbolizer)"
        - LLVM_SYMBOLIZER_PATH="$(which llvm-symbolizer)"

install:
  - python3 -m pip install pip==19.3.1 --upgrade
  - python3 -m pip install cmake==3.16.3 ninja==1.9.0.post1 --upgrade --user

before_script:
  - cmake --version
  - ninja --version
  - mkdir _build && cd _build
  - eval "${MATRIX_EVAL}"

script:
  - cmake -DCMAKE_BUILD_TYPE="$BUILD_TYPE" $CMAKE_EXTRA_OPTIONS ..
  - cmake --build . --parallel 2
  - ctest --output-on-failure
